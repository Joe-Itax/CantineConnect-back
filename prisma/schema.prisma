generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      UserRole
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parent    Parent?

  @@index([email])
}

model Parent {
  id       String    @id @unique
  user     User      @relation(fields: [id], references: [id])
  students Student[]
}

model SchoolStudent {
  id        String   @id @default(uuid())
  name      String
  class     String
  gender    String
  matricule String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Student   Student?

  @@index([matricule])
  @@index([id])
}

model Student {
  id              String         @id @default(uuid())
  schoolStudentId String         @unique
  matriculeHashe  String         @unique
  parentId        String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  abonnements     Abonnement[]
  notifications   Notification[]
  repas           Repas[]
  parent          Parent         @relation(fields: [parentId], references: [id])
  schoolStudent   SchoolStudent  @relation(fields: [schoolStudentId], references: [id])

  @@index([id])
  @@index([schoolStudentId])
  @@index([matriculeHashe])
  @@index([parentId])
}

model Abonnement {
  duration  Int?
  price     Float?
  startDate DateTime?           @default(now())
  endDate   DateTime?
  status    StatusSubscription?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  studentId String
  id        Int                 @id @default(autoincrement())
  student   Student             @relation(fields: [studentId], references: [id])
}

model Repas {
  id        Int      @id @default(autoincrement())
  studentId String
  date      DateTime @default(now())
  status    Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  studentId String
  message   String
  read      Boolean  @default(false)
  type      String
  details   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [id])

  @@index([id])
}

enum UserRole {
  admin
  parent
  agent
}

enum StatusSubscription {
  actif
  // expir√©
}
