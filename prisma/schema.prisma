generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      UserRole
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parent    Parent?

  @@index([email])
}

model Parent {
  id              String           @id @unique
  user            User             @relation(fields: [id], references: [id])
  canteenStudents CanteenStudent[]
}

model EnrolledStudent {
  id                    String          @id @default(uuid())
  name                  String
  class                 String
  gender                String
  matricule             String          @unique
  isRegisteredToCanteen Boolean         @default(false)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  canteenStudent        CanteenStudent?

  @@index([matricule])
  @@index([id])
}

model CanteenStudent {
  id                String          @id @default(uuid())
  enrolledStudentId String          @unique
  matriculeHashe    String          @unique
  parentId          String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  abonnements       Abonnement[]
  notifications     Notification[]
  repas             Repas[]
  parent            Parent          @relation(fields: [parentId], references: [id])
  enrolledStudent   EnrolledStudent @relation(fields: [enrolledStudentId], references: [id])

  @@index([id])
  @@index([enrolledStudentId])
  @@index([matriculeHashe])
  @@index([parentId])
}

model Abonnement {
  duration         Int?
  price            Float?
  startDate        DateTime?           @default(now())
  endDate          DateTime?
  status           StatusSubscription?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  canteenStudentId String
  id               Int                 @id @default(autoincrement())
  canteenStudent   CanteenStudent      @relation(fields: [canteenStudentId], references: [id])
}

model Repas {
  id               Int            @id @default(autoincrement())
  canteenStudentId String
  date             DateTime       @default(now())
  status           Boolean?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  student          CanteenStudent @relation(fields: [canteenStudentId], references: [id])
}

model Notification {
  id               Int            @id @default(autoincrement())
  canteenStudentId String
  message          String
  read             Boolean        @default(false)
  type             String
  details          Json?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  canteenStudent   CanteenStudent @relation(fields: [canteenStudentId], references: [id])

  @@index([id])
}

enum UserRole {
  admin
  parent
  agent
}

enum StatusSubscription {
  actif
  expir√©
}
