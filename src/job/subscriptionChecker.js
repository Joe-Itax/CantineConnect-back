const cron = require("node-cron");
const { prisma } = require("../lib/prisma");

// Ex√©cuter toutes les 6 heures (0 */6 * * *)
cron.schedule("0 */6 * * *", async () => {
  console.log("‚è∞ Lancement du cron job de v√©rification des abonnements...");

  const now = new Date();

  try {
    // √âtape 1 : R√©cup√©ration les abonnements expir√©s
    const abonnementsExpir√©s = await prisma.abonnement.findMany({
      where: {
        status: "actif",
        endDate: { lt: now },
      },
      include: {
        canteenStudent: {
          include: {
            parent: { include: { user: true } },
            enrolledStudent: true,
          },
        },
      },
    });

    if (abonnementsExpir√©s.length === 0) {
      console.log("‚úÖ Aucun abonnement expir√© trouv√©.");
      return;
    }

    console.log(
      `üîç ${abonnementsExpir√©s.length} abonnement(s) expir√©(s) d√©tect√©(s).`
    );

    // √âtape 2 : Mise √† jour et notifications en transaction
    await prisma.$transaction(async (tx) => {
      // Mise √† jour des statuts
      const updateAbonnement = await tx.abonnement.updateMany({
        where: { id: { in: abonnementsExpir√©s.map((a) => a.id) } },
        data: { status: "expir√©" },
      });

      // Cr√©ation des notifications
      await Promise.all(
        abonnementsExpir√©s.map((abo) =>
          tx.notification.create({
            data: {
              canteenStudentId: abo.canteenStudentId,
              message: `L'abonnement de ${abo.canteenStudent.enrolledStudent.name} a expir√©.`,
              type: "abonnement_expir√©",
              details: { expiredAt: now },
            },
          })
        )
      );
    });
    console.log("üéØ V√©rification termin√©e !");
  } catch (error) {
    console.error("‚ùå Erreur lors du cron job abonnement :", error);
  } finally {
    await prisma.$disconnect(); // Important pour les cron jobs
  }
});
